package mysql;

import common.Degree;
import database.SQLUtility;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.List;
import java.util.LinkedList;
import java.util.logging.Level;
import utilities.WebErrorLogger;


/**
 * Represents a manager for the <code>Degree</code> object, which 
 * implements the <code>DegreeManager</code> interface.
 * 
 * @author Gryphon Ayers (2019)
 */
public class DegreeManager implements database.DegreeManager {

    /**
     * Returns the <code>Degree</code> object corresponding to the 
     * provided primary key in the user's database.
     * 
     * @param degreeID The primary key of the application to fetch from
     * the user's database.
     * @return A <code>Degree</code> object which corresponds to the 
     * application with the provided primary key in the user's database.
     */
    @Override
    public Degree getDegree(int degreeID) {
        String sql = "SELECT * FROM degree WHERE degreeID = ? ; ";
        Connection conn = mysql.Web_MYSQL_Helper.getConnection();
        ResultSet rs;
        Degree deg;
        PreparedStatement stmt2 = null;
        try {
            stmt2 = conn.prepareStatement(sql);
            stmt2.setInt(1, degreeID);

            rs = stmt2.executeQuery();
            if (rs == null || rs.next() == false) {
                Web_MYSQL_Helper.closePreparedStatement(stmt2);
                Web_MYSQL_Helper.returnConnection(conn);
                return null;
            }
            deg = SQLUtility.convertResultSetToDegree(rs);
            
            rs.close();

        } catch (SQLException ex) {
            WebErrorLogger.log(Level.SEVERE, "SQLException in getDegree(int degreeID) "
                    + "degreeID="+degreeID + " error: " + ex);
            Web_MYSQL_Helper.closePreparedStatement(stmt2);
            Web_MYSQL_Helper.returnConnection(conn);
            return null;
        }
        Web_MYSQL_Helper.closePreparedStatement(stmt2);
        Web_MYSQL_Helper.returnConnection(conn);

        return deg;
    }

    /**
     * Returns the <code>Degree</code> objects associated with the provided
     * user ID in the user's database.
     * 
     * @param application The user ID associated with the degree records to 
     * fetch from the user's database.
     * @return A List of <code>Degree</code> objects corresponding to 
     * the degree recprds associated with the provided user ID in the user's 
     * database.
     */
    @Override
    public List<Degree> getDegreesByApplication(int application) {
        String sql = "SELECT * FROM degree WHERE application = ? ; ";
        Connection conn = mysql.Web_MYSQL_Helper.getConnection();
        ResultSet rs;
        LinkedList<Degree> degs = new LinkedList<>();
        PreparedStatement stmt2 = null;
        try {
            stmt2 = conn.prepareStatement(sql);
            stmt2.setInt(1, application);

            rs = stmt2.executeQuery();
            if (rs == null || rs.next() == false) {
                Web_MYSQL_Helper.closePreparedStatement(stmt2);
                Web_MYSQL_Helper.returnConnection(conn);
                return null;
            }
            do {
                Degree deg = SQLUtility.convertResultSetToDegree(rs);
                degs.add(deg);
            } while(rs.next());
            
            rs.close();

        } catch (SQLException ex) {
            WebErrorLogger.log(Level.SEVERE, "SQLException in getDegreesByApplication(int application) "
                    + "application="+application + " error: " + ex);
            Web_MYSQL_Helper.closePreparedStatement(stmt2);
            Web_MYSQL_Helper.returnConnection(conn);
            return null;
        }
        Web_MYSQL_Helper.closePreparedStatement(stmt2);
        Web_MYSQL_Helper.returnConnection(conn);

        return degs;
    }

    /**
     * Attempts to insert the contents of a <code>Degree</code> object
     * into the user's database.
     *
     * @param degree An <code>Degree</code> object which will be used 
     * to add to the user's database.
     * @return true if the <code>Degree</code> was inserted successfully, 
     * false otherwise.
     */
    @Override
    public Integer insertDegree(Degree degree) {
        String sql = "INSERT INTO `Tenure`.`degree` "
                + "(`application`, "
                + "`institution`, "
                + "`credential`, "
                + "`fieldOfStudy`, "
                + "`attendancePeriods`, "
                + "`degreeDate`, "
                + "`transcript`) VALUES (?, ?, ?, ?, ?, ?, ?);";
        Integer returnValue = null;
        Connection conn = mysql.Web_MYSQL_Helper.getConnection();
        PreparedStatement stmt2 = null;
        try {
            stmt2 = conn.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS);
            stmt2.setInt(1, degree.getApplication());
            stmt2.setString(2, degree.getInstitution());
            stmt2.setString(3, degree.getCredential());
            stmt2.setString(4, degree.getFieldOfStudy());
            stmt2.setString(5, degree.getAttendancePeriods());
            stmt2.setString(6, degree.getDegreeDate());
            if(degree.getTranscript() < 0) { // check for no transcript
                stmt2.setNull(7, java.sql.Types.INTEGER);
            } else {
                stmt2.setInt(7, degree.getTranscript());
            }
            
            if (stmt2.executeUpdate() > 0) {
                ResultSet rs = stmt2.getGeneratedKeys();
                if(rs.next()) {
                    returnValue = rs.getInt(1);
                }
            }
        } catch (SQLException ex) {
            WebErrorLogger.log(Level.SEVERE, "SQLException in insertDegree(Degree degree) " + ex);
            Web_MYSQL_Helper.closePreparedStatement(stmt2);
            Web_MYSQL_Helper.returnConnection(conn);
            return null;
        }
        Web_MYSQL_Helper.closePreparedStatement(stmt2);
        Web_MYSQL_Helper.returnConnection(conn);
        return returnValue;
    }

    /**
     * Updates the user's database such that the <code>Degree</code> object 
     * is consistent with the corresponding degree record in the database.
     *
     * @param degree An <code>Degree</code> object containing the
     * information to be used for the update.
     * @return An <code>Degree</code> object corresponding to the updated
     * state of the degree record stored in the user's database.
     */
    @Override
    public Degree updateDegree(Degree degree) {
        String sql = "UPDATE degree SET application=?, "
                + "institution=?, credential=?, fieldOfStudy=?, "
                + "attendancePeriods=?, degreeDate=?, transcript=? "
                + "WHERE degreeID=?;";
        Connection conn = mysql.Web_MYSQL_Helper.getConnection();
        PreparedStatement stmt2 = null;
        try {
            stmt2 = conn.prepareStatement(sql);
            stmt2.setInt(1, degree.getApplication());
            stmt2.setString(2, degree.getInstitution());
            stmt2.setString(3, degree.getCredential());
            stmt2.setString(4, degree.getFieldOfStudy());
            stmt2.setString(5, degree.getAttendancePeriods());
            stmt2.setString(6, degree.getDegreeDate());
            if(degree.getTranscript() < 0) { // check for no transcript
                stmt2.setNull(7, java.sql.Types.INTEGER);
            } else {
                stmt2.setInt(7, degree.getTranscript());
            }
            stmt2.setInt(8, degree.getDegreeID());
            
            stmt2.executeUpdate();
            
            Web_MYSQL_Helper.closePreparedStatement(stmt2);
            Web_MYSQL_Helper.returnConnection(conn);
        } catch (SQLException ex) {
            WebErrorLogger.log(Level.SEVERE, "SQLException in deleteDegree(Degree degree) " + ex);
            Web_MYSQL_Helper.closePreparedStatement(stmt2);
            Web_MYSQL_Helper.returnConnection(conn);
        }
        Web_MYSQL_Helper.closePreparedStatement(stmt2);
        Web_MYSQL_Helper.returnConnection(conn);
        
        return getDegree(degree.getDegreeID());
    }

    /**
     * Return true if the given degree record has been deleted from the database.
     * Otherwise, return false.
     *
     * @param degreeID The identifier of the degree record to be deleted
     * from the database.
     * @return <code>true</code> if the given degree record has been deleted  
     * from the database successfully, <code>false</code> otherwise.
     */
    @Override
    public boolean deleteDegree(int degreeID) {
        String sql = "DELETE FROM degree WHERE degreeID = ?;";
        Connection conn = mysql.Web_MYSQL_Helper.getConnection();
        PreparedStatement stmt2 = null;
        boolean returnValue;
        try {
            stmt2 = conn.prepareStatement(sql);
            stmt2.setInt(1, degreeID);
            
            returnValue = stmt2.executeUpdate() > 0;
            
            Web_MYSQL_Helper.closePreparedStatement(stmt2);
            Web_MYSQL_Helper.returnConnection(conn);
        } catch (SQLException ex) {
            WebErrorLogger.log(Level.SEVERE, "SQLException in deleteDegree(Degree degree) " + ex);
            Web_MYSQL_Helper.closePreparedStatement(stmt2);
            Web_MYSQL_Helper.returnConnection(conn);
            return false;
        }
        Web_MYSQL_Helper.closePreparedStatement(stmt2);
        Web_MYSQL_Helper.returnConnection(conn);
        
        return returnValue;
    }

    /**
     * Returns a List of all degree records present in the database.
     * @return A List of all degree records present if any applications are
     * present, or <code>null</code> if no degree records are present or an error
     * condition has occurred.
     */
    @Override
    public List<Degree> getAllDegrees() {
        String sql = "SELECT * FROM degree ; ";
        Connection conn = mysql.Web_MYSQL_Helper.getConnection();
        ResultSet rs;
        LinkedList<Degree> degs = new LinkedList<>();
        Statement stmt = null;
        try {
            stmt = conn.createStatement();

            rs = stmt.executeQuery(sql);
            if (rs == null || rs.next() == false) {
                Web_MYSQL_Helper.closeStatement(stmt);
                Web_MYSQL_Helper.returnConnection(conn);
                return null;
            }
            do {
                Degree deg = SQLUtility.convertResultSetToDegree(rs);
                degs.add(deg);
            } while(rs.next());
            
            rs.close();

        } catch (SQLException ex) {
            WebErrorLogger.log(Level.SEVERE, "SQLException in getAllDegrees() "
                    + " error: " + ex);
            Web_MYSQL_Helper.closeStatement(stmt);
            Web_MYSQL_Helper.returnConnection(conn);
            return null;
        }
        Web_MYSQL_Helper.closeStatement(stmt);
        Web_MYSQL_Helper.returnConnection(conn);

        return degs;
    }
    
}
