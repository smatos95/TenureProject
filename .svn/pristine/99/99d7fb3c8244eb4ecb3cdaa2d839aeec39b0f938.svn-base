package servlets;

import common.Application;
import common.Degree;
import common.Profile;
import common.TeachingExp;
import common.WorkExp;
import java.io.IOException;
import java.io.OutputStream;
import java.util.Collection;
import java.util.Iterator;
import java.util.List;
import javax.servlet.ServletContext;
import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import mysql.DegreeManager;
import mysql.ProfileManager;
import mysql.TeachingExpManager;
import mysql.WorkExpManager;
import org.apache.poi.xwpf.usermodel.ParagraphAlignment;
import org.apache.poi.xwpf.usermodel.XWPFDocument;
import org.apache.poi.xwpf.usermodel.XWPFParagraph;
import org.apache.poi.xwpf.usermodel.XWPFRun;

/**
 *
 * @author rsh50944
 */
@WebServlet(name = "PrintAllPagesServlet", urlPatterns = {"/PrintAllPagesServlet"})
public class PrintAllPagesServlet extends HttpServlet {

    /**
     * Processes requests for both HTTP <code>GET</code> and <code>POST</code>
     * methods.
     *
     * @param request servlet request
     * @param response servlet response
     * @throws ServletException if a servlet-specific error occurs
     * @throws IOException if an I/O error occurs
     */
    protected void processRequest(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        ProfileManager pm = new ProfileManager();
        DegreeManager degreeManager = new DegreeManager();
        WorkExpManager workManager = new WorkExpManager();
        TeachingExpManager teachingExpManager = new TeachingExpManager();  
        Application a = (Application) request.getSession().getAttribute("currentapp");
        
        Collection<Degree> degrees = degreeManager.getDegreesByApplication(a.getApplicationID());
        List<WorkExp> workExps = workManager.getWorkExpsByApplication(a.getApplicationID());
        List<TeachingExp> tems = teachingExpManager.getTeachingExpsByApplication(a.getApplicationID());
        
        Profile p = pm.getProfileByUserID(a.getApplicantUser());
        XWPFParagraph[][] degreePs;
        XWPFParagraph[][] workExpPs;
        XWPFParagraph[][] temPs;
        XWPFRun[][] degreeRs;
        XWPFRun[][] workExpRs;
        XWPFRun[][] temRs;
        String[] attendanceDates;
        Iterator<Degree> itann = null;
        Degree degree = new Degree(0);
        WorkExp workExp = new WorkExp(0);
        TeachingExp tem = new TeachingExp(0);
        
        if (degrees != null && degrees.isEmpty() == false) {
            degreePs = new XWPFParagraph[degrees.size()][5];
            degreeRs = new XWPFRun[degrees.size()][10];
            itann = degrees.iterator();
            degree = itann.next();
        } else {
            degreePs = new XWPFParagraph[1][5];
            degreeRs = new XWPFRun[1][10];
        }
        if (workExps != null && workExps.isEmpty() == false) {
            workExpPs = new XWPFParagraph[workExps.size()][5];
            workExpRs = new XWPFRun[workExps.size()][10];
        } else {
            workExpPs = new XWPFParagraph[1][5];
            workExpRs = new XWPFRun[1][10];
        } 
        if (tems != null && tems.isEmpty() == false) {
            temPs = new XWPFParagraph[tems.size()][5];
            temRs = new XWPFRun[tems.size()][10];
        } else {
            temPs = new XWPFParagraph[1][5];
            temRs = new XWPFRun[1][10];
        }
        
        // Create Word Document
        XWPFDocument document = new XWPFDocument();
        
        // Create Formatted Cover Page
        XWPFParagraph title = document.createParagraph();
        title.setAlignment(ParagraphAlignment.CENTER);
        XWPFRun titleRun = title.createRun();
        titleRun.addCarriageReturn();
        titleRun.addCarriageReturn();
        titleRun.addCarriageReturn();
        
        if (a.getCustomFirstName() == null || a.getCustomLastName() == null)
            titleRun.setText("Your Name Here");
        else
            titleRun.setText(a.getCustomFirstName() + " " + a.getCustomLastName());
        
        titleRun.setFontFamily("Cambria");
        titleRun.setFontSize(40);
        
        XWPFParagraph subtitle = document.createParagraph();
        subtitle.setAlignment(ParagraphAlignment.CENTER);
        XWPFRun subtitleRun = subtitle.createRun();
        
        if (p.getRank() == null || a.getDepartment() == null)
            subtitleRun.setText("Your Rank and Department Here");
        else
            subtitleRun.setText(p.getRank() + ", " + a.getDepartment());
        subtitleRun.setFontFamily("Cambria");
        subtitleRun.setFontSize(22);
        
        // Create Formatted First Page
        XWPFParagraph firstPage1 = document.createParagraph();
        firstPage1.setSpacingAfter(-1);
        firstPage1.setSpacingBetween(1.5);
        firstPage1.setPageBreak(true);
        XWPFRun bolded1 = firstPage1.createRun();
        bolded1.setBold(true);
        bolded1.setText("Name:");
        bolded1.addTab();
        bolded1.addTab();
        bolded1.addTab();
        bolded1.addTab();
        bolded1.addTab();
        bolded1.addTab();
        bolded1.addTab();
        bolded1.addTab();
        XWPFRun info1 = firstPage1.createRun();
        
        if (a.getCustomFirstName() == null || a.getCustomLastName() == null)
            info1.setText("Your Name Here");
        else
            info1.setText(a.getCustomFirstName() + " " + a.getCustomLastName());
        
        XWPFParagraph firstPage2 = document.createParagraph();
        firstPage2.setSpacingAfter(-1);
        firstPage2.setSpacingBefore(-1);
        firstPage2.setSpacingBetween(1.5);
        XWPFRun bolded2 = firstPage2.createRun();
        bolded2.setBold(true);
        bolded2.setText("Phone:");
        bolded2.addTab();
        bolded2.addTab();
        bolded2.addTab();
        bolded2.addTab();
        bolded2.addTab();
        bolded2.addTab();
        bolded2.addTab();
        bolded2.addTab();
        XWPFRun info2 = firstPage2.createRun();
        if (p.getCampusPhone() == null)
            info2.setText("Your Campus Phone Here");
        else
            info2.setText(p.getCampusPhone());
        
        XWPFParagraph firstPage3 = document.createParagraph();
        firstPage3.setSpacingAfter(-1);
        firstPage3.setSpacingBefore(-1);
        firstPage3.setSpacingBetween(1.5);
        XWPFRun bolded3 = firstPage3.createRun();
        bolded3.setBold(true);
        bolded3.setText("Rank Being Requested:");
        bolded3.addTab();
        bolded3.addTab();
        bolded3.addTab();
        bolded3.addTab();
        bolded3.addTab();
        bolded3.addTab();
        XWPFRun info3 = firstPage3.createRun();
        if (p.getRank() == null)
            info3.setText("Your Rank Here");
        else
            info3.setText(p.getRank());
        
        XWPFParagraph firstPage4 = document.createParagraph();
        firstPage4.setSpacingAfter(-1);
        firstPage4.setSpacingBefore(-1);
        firstPage4.setSpacingBetween(1.5);
        XWPFRun bolded4 = firstPage4.createRun();
        bolded4.setBold(true);
        bolded4.setText("Department:");
        bolded4.addTab();
        bolded4.addTab();
        bolded4.addTab();
        bolded4.addTab();
        bolded4.addTab();
        bolded4.addTab();
        bolded4.addTab();
        XWPFRun info4 = firstPage4.createRun();
        if (a.getDepartment() == null)
            info4.setText("Your Department Here");
        else
            info4.setText(a.getDepartment());
        
        XWPFParagraph firstPage5 = document.createParagraph();
        firstPage5.setSpacingAfter(-1);
        firstPage5.setSpacingBefore(-1);
        firstPage5.setSpacingBetween(1.5);
        XWPFRun bolded5 = firstPage5.createRun();
        bolded5.setBold(true);
        bolded5.setText("Chairperson:");
        bolded5.addTab();
        bolded5.addTab();
        bolded5.addTab();
        bolded5.addTab();
        bolded5.addTab();
        bolded5.addTab();
        bolded5.addTab();
        XWPFRun info5 = firstPage5.createRun();
        if (a.getDepartmentChair() == null)
            info5.setText("Your Department Chair Here");
        else
            info5.setText(a.getDepartmentChair());
        
        XWPFParagraph firstPage6 = document.createParagraph();
        firstPage6.setSpacingAfter(-1);
        firstPage6.setSpacingBefore(-1);
        firstPage6.setSpacingBetween(1.5);
        XWPFRun bolded6 = firstPage6.createRun();
        bolded6.setBold(true);
        bolded6.setText("Chairperson Phone Number:");
        bolded6.addTab();
        bolded6.addTab();
        bolded6.addTab();
        bolded6.addTab();
        bolded6.addTab();
        XWPFRun info6 = firstPage6.createRun();
        if (a.getChairPhone() == null)
            info6.setText("Chair's Phone Here");
        else
            info6.setText(a.getChairPhone());
        
        XWPFParagraph firstPage7 = document.createParagraph();
        firstPage7.setSpacingAfter(-1);
        firstPage7.setSpacingBefore(-1);
        firstPage7.setSpacingBetween(1.5);
        XWPFRun bolded7 = firstPage7.createRun();
        bolded7.setBold(true);
        bolded7.setText("Date of Appointment to BU:");
        bolded7.addTab();
        bolded7.addTab();
        bolded7.addTab();
        bolded7.addTab();
        bolded7.addTab();
        XWPFRun info7 = firstPage7.createRun();
        if (p.getAppointmentDate() == null)
            info7.setText("Your Appointment Date Here");
        else
            info7.setText(utilities.FormattingUtility.formatDate(p.getAppointmentDate().toString().substring(0, p.getAppointmentDate().toString().indexOf("T"))));
        
        XWPFParagraph firstPage8 = document.createParagraph();
        firstPage8.setSpacingAfter(-1);
        firstPage8.setSpacingBefore(-1);
        firstPage8.setSpacingBetween(1.5);
        XWPFRun bolded8 = firstPage8.createRun();
        bolded8.setBold(true);
        bolded8.setText("Total Anticipated Years of Academic Service:");
        bolded8.addTab();
        bolded8.addTab();
        bolded8.addTab();
        XWPFRun info8 = firstPage8.createRun();
        if (p.getYearsOfService() == 0)
            info8.setText("Your Years of Service Here");
        else
            info8.setText(Integer.toString(p.getYearsOfService()));
        
        XWPFParagraph firstPage9 = document.createParagraph();
        firstPage9.setSpacingAfter(-1);
        firstPage9.setSpacingBefore(-1);
        firstPage9.setSpacingBetween(1.5);
        XWPFRun bolded9 = firstPage9.createRun();
        bolded9.setBold(true);
        bolded9.setText("Date of Last Promotion at BU:");
        bolded9.addTab();
        bolded9.addTab();
        bolded9.addTab();
        bolded9.addTab();
        bolded9.addTab();
        XWPFRun info9 = firstPage9.createRun();
        info9.setItalic(true);
        info9.setText("Not Applicable");
        
        XWPFParagraph firstPage10 = document.createParagraph();
        firstPage10.setSpacingAfter(-1);
        firstPage10.setSpacingBefore(-1);
        firstPage10.setSpacingBetween(1.5);
        XWPFRun bolded10 = firstPage10.createRun();
        bolded10.setBold(true);
        bolded10.setText("Date Application Submitted to Department Chairperson:");
        bolded10.addTab();
        XWPFRun info10 = firstPage10.createRun();
        info10.setText("Date Submitted Here");
        // CREATE FIRST ENTRY
        degreePs[0][0] = document.createParagraph();
        degreePs[0][0].setSpacingAfter(-1);
        degreePs[0][0].setSpacingBetween(1.5);
        degreePs[0][0].setPageBreak(true);
        degreeRs[0][0] = degreePs[0][0].createRun();
        degreeRs[0][0].setBold(true);
        degreeRs[0][0].setText("Institution:");
        degreeRs[0][0].addTab();
        degreeRs[0][0].addTab();
        degreeRs[0][1] = degreePs[0][0].createRun();
        degreeRs[0][1].setText(degree.getInstitution());
        
        degreePs[0][1] = document.createParagraph();
        degreePs[0][1].setSpacingAfter(-1);
        degreePs[0][1].setSpacingBefore(-1);
        degreePs[0][1].setSpacingBetween(1.5);
        degreeRs[0][2] = degreePs[0][1].createRun();
        degreeRs[0][2].setBold(true);
        degreeRs[0][2].setText("Degree:");
        degreeRs[0][2].addTab();
        degreeRs[0][2].addTab();
        degreeRs[0][2].addTab();
        degreeRs[0][3] = degreePs[0][1].createRun();
        degreeRs[0][3].setText(degree.getCredential());

        degreePs[0][2] = document.createParagraph();
        degreePs[0][2].setSpacingAfter(-1);
        degreePs[0][2].setSpacingBefore(-1);
        degreePs[0][2].setSpacingBetween(1.5);
        degreeRs[0][4] = degreePs[0][2].createRun();
        degreeRs[0][4].setBold(true);
        degreeRs[0][4].setText("Field of Study:");
        degreeRs[0][4].addTab();
        degreeRs[0][4].addTab();
        degreeRs[0][5] = degreePs[0][2].createRun();
        degreeRs[0][5].setText(degree.getFieldOfStudy());

        degreePs[0][3] = document.createParagraph();
        degreePs[0][3].setSpacingAfter(-1);
        degreePs[0][3].setSpacingBefore(-1);
        degreePs[0][3].setSpacingBetween(1.5);
        degreeRs[0][6] = degreePs[0][3].createRun();
        degreeRs[0][6].setBold(true);
        degreeRs[0][6].setText("Dates of Attendance");
        degreeRs[0][6].addTab();
        degreeRs[0][7] = degreePs[0][3].createRun();
        attendanceDates = utilities.FormattingUtility.dateRangeConvert(degree.getAttendancePeriods());
        degreeRs[0][7].setText(utilities.FormattingUtility.formatDate(attendanceDates[0]) + " - "
        + utilities.FormattingUtility.formatDate(attendanceDates[1]));

        degreePs[0][4] = document.createParagraph();
        degreePs[0][4].setSpacingAfter(-1);
        degreePs[0][4].setSpacingBefore(-1);
        degreePs[0][4].setSpacingBetween(1.5);
        degreeRs[0][8] = degreePs[0][4].createRun();
        degreeRs[0][8].setBold(true);
        degreeRs[0][8].setText("Date of Degree:");
        degreeRs[0][8].addTab();
        degreeRs[0][8].addTab();
        degreeRs[0][9] = degreePs[0][4].createRun();
        degreeRs[0][9].setText(utilities.FormattingUtility.formatDate(degree.getDegreeDate()));
        degreeRs[0][9].addCarriageReturn();
        
        for (int i = 1; i < degreePs.length; i++) {
            if (itann != null)
                degree = itann.next(); 
            
            degreePs[i][0] = document.createParagraph();
            degreePs[i][0].setSpacingAfter(-1);
            degreePs[i][0].setSpacingBefore(-1);
            degreePs[i][0].setSpacingBetween(1.5);
            degreeRs[i][0] = degreePs[i][0].createRun();
            degreeRs[i][0].setBold(true);
            degreeRs[i][0].setText("Institution:");
            degreeRs[i][0].addTab();
            degreeRs[i][0].addTab();
            degreeRs[i][1] = degreePs[i][0].createRun();
            degreeRs[i][1].setText(degree.getInstitution());
            
            degreePs[i][1] = document.createParagraph();
            degreePs[i][1].setSpacingAfter(-1);
            degreePs[i][1].setSpacingBefore(-1);
            degreePs[i][1].setSpacingBetween(1.5);
            degreeRs[i][2] = degreePs[i][1].createRun();
            degreeRs[i][2].setBold(true);
            degreeRs[i][2].setText("Degree:");
            degreeRs[i][2].addTab();
            degreeRs[i][2].addTab();
            degreeRs[i][2].addTab();
            degreeRs[i][3] = degreePs[i][1].createRun();
            degreeRs[i][3].setText(degree.getCredential());
            
            degreePs[i][2] = document.createParagraph();
            degreePs[i][2].setSpacingAfter(-1);
            degreePs[i][2].setSpacingBefore(-1);
            degreePs[i][2].setSpacingBetween(1.5);
            degreeRs[i][4] = degreePs[i][2].createRun();
            degreeRs[i][4].setBold(true);
            degreeRs[i][4].setText("Field of Study:");
            degreeRs[i][4].addTab();
            degreeRs[i][4].addTab();
            degreeRs[i][5] = degreePs[i][2].createRun();
            degreeRs[i][5].setText(degree.getFieldOfStudy());
            
            degreePs[i][3] = document.createParagraph();
            degreePs[i][3].setSpacingAfter(-1);
            degreePs[i][3].setSpacingBefore(-1);
            degreePs[i][3].setSpacingBetween(1.5);
            degreeRs[i][6] = degreePs[i][3].createRun();
            degreeRs[i][6].setBold(true);
            degreeRs[i][6].setText("Dates of Attendance");
            degreeRs[i][6].addTab();
            degreeRs[i][7] = degreePs[i][3].createRun();
            attendanceDates = utilities.FormattingUtility.dateRangeConvert(degree.getAttendancePeriods());
            degreeRs[i][7].setText(utilities.FormattingUtility.formatDate(attendanceDates[0]) + " - "
            + utilities.FormattingUtility.formatDate(attendanceDates[1]));
            
            degreePs[i][4] = document.createParagraph();
            degreePs[i][4].setSpacingAfter(-1);
            degreePs[i][4].setSpacingBefore(-1);
            degreePs[i][4].setSpacingBetween(1.5);
            degreeRs[i][8] = degreePs[i][4].createRun();
            degreeRs[i][8].setBold(true);
            degreeRs[i][8].setText("Date of Degree:");
            degreeRs[i][8].addTab();
            degreeRs[i][8].addTab();
            degreeRs[i][9] = degreePs[i][4].createRun();
            degreeRs[i][9].setText(utilities.FormattingUtility.formatDate(degree.getDegreeDate()));
            degreeRs[i][9].addCarriageReturn();
        }
        
        // Set Download info
        String relativePath = getServletContext().getRealPath("");
        ServletContext context = getServletContext();
        String mimeType = "application/vnd.openxmlformats-officedocument.wordprocessingml.document";
        response.setContentType(mimeType);
        String headerKey = "Content-Disposition";
        String headerValue = String.format("attachment; filename=\"%s\"", a.getFriendlyName() + ".docx");
        response.setHeader(headerKey, headerValue);
        
        // Send the download!
        OutputStream outStream = response.getOutputStream();
        document.write(outStream);
        
        // Finish out.
        outStream.close();
    }

    // <editor-fold defaultstate="collapsed" desc="HttpServlet methods. Click on the + sign on the left to edit the code.">
    /**
     * Handles the HTTP <code>GET</code> method.
     *
     * @param request servlet request
     * @param response servlet response
     * @throws ServletException if a servlet-specific error occurs
     * @throws IOException if an I/O error occurs
     */
    @Override
    protected void doGet(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        processRequest(request, response);
    }

    /**
     * Handles the HTTP <code>POST</code> method.
     *
     * @param request servlet request
     * @param response servlet response
     * @throws ServletException if a servlet-specific error occurs
     * @throws IOException if an I/O error occurs
     */
    @Override
    protected void doPost(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        processRequest(request, response);
    }

    /**
     * Returns a short description of the servlet.
     *
     * @return a String containing servlet description
     */
    @Override
    public String getServletInfo() {
        return "Short description";
    }// </editor-fold>

}
