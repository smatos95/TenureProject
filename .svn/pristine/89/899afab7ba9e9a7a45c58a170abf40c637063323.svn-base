<%-- 
    Document   : otherWorkExperience
    Created on : Feb 24, 2019, 2:05:23 PM
               : Steven Matos (2019)
               : Shane Panagakos (2019)
    Author     : Jake Gordon (2019)
--%>

<%@page import="java.util.Iterator"%>
<%@page import="java.util.List"%>
<%@page import="common.BuUser"%>
<%@page import="java.time.LocalDateTime"%>
<%@page import="java.util.Collection"%>
<%@page import="common.Application"%>
<%@page import="mysql.WorkExpManager"%>
<%@page import="common.WorkExp"%>
<%@page contentType="text/html" pageEncoding="UTF-8"%>
<!DOCTYPE html>
<html>
    <head>
        <title>Other Work Experience</title>
        <link rel ="icon" href="../images/husky.png">
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <link rel="stylesheet" href="styles/controlPage.css" type="text/css"/>
        <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">
        <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.2.1/jquery.min.js"></script>
        <script src="//cdnjs.cloudflare.com/ajax/libs/jasny-bootstrap/3.1.3/js/jasny-bootstrap.min.js"></script>
        <script src="scripts/wordCounterScript.js"></script>
    </head>
    <body bgcolor="#F4ECD9">
        <%
            //PLEASE CHANGE THE DOCUEMENTATION OF THIS PAGE, IT WAS COPY PASTED AND NOT ACCURATE TO THIS PAGE
            
            /**
             * This java code sets up all the objects used for a user's other
             * work experiences. It returns the current
             * <code>HttpSession</code> if it exists and will not create a new
             * one. It creates an <code>Object</code> unique to the current
             * session ID. It creates a <code>TeachingExpManager</code> to
             * manage all the other work experiences the user has currently
             * made. It creates an <code>Application</code> and synchronizes
             * it to the current application of the user It creates an
             * <code>Integer</code> object and synchronizes it to the current
             * other work experience being worked upon. It creates an
             * <code>int</code> used to uniquely id each delete button later
             * in the program.
             *
             * @param sess The current session. Set to false because the user
             * should only be able to get to this page if it currently exists
             * and cannot create a new one.
             * @param lock An object unique to the session's ID used to
             * synchronize the current application and current other work
             * experience.
             * @param wem The WorkExpManager for the user's other work
             * experience pool.
             * @param app The user's current application being worked on.
             * @param currentexp An Integer object used to set the current
             * teaching experience the user is working on.
             * @param i An int used to uniquely name the id's of the delete
             * buttons for each experience.
             */

            HttpSession sess = request.getSession(false);
            final Object lock = sess.getId().intern();
            WorkExpManager wem = new WorkExpManager();
            Application app;
            Integer currentwork;
            BuUser user;
            int i = 0;
            synchronized (lock) {
                app = (Application) sess.getAttribute("currentapp");
                currentwork = (Integer) sess.getAttribute("currentwork");
                user = (BuUser) sess.getAttribute("user");
            }

            /**
             * This java code sets up to contain multiple other experiences
             * for the user's application. It then checks to see if the user
             * has an application and then gets all the teaching experiences
             * in that application. From there it sets if there are any
             * teaching experiences based upon if the teaching experiences
             * exist and the size of the teaching experiences is greater than
             * 0. It creates a <code>List</code> of <code>WorkExp</code>
             * objects and for the user to fill. It creates a
             * <code>boolean</code> to check if the user currently has any
             * other work experiences tied to the application. It creates a
             * <code>WorkExp</code> object for the current other work
             * experience to be added.
             *
             * @param wec The list of degrees that the user has tied to their
             * application.
             * @param wecsExist A boolean to check and see if the user has
             * teaching experiences tied to their current application.
             * @param e A other work experience object used to populate the
             * table with all user's current other work experiences.
             */
            List<WorkExp> wec = null;
            boolean wecExist = false;
            WorkExp e = null;
            if (app != null) {
                wec = wem.getWorkExpsByApplication(app.getApplicationID());
            }
            wecExist = (wec != null && wec.size() > 0);

            /**
             * This java code sets all the default values for all the fields
             * used to create a other work experience.
             *
             * @param institution A String object that represents the
             * institution where the user taught or worked at.
             * @param title A String object that represents the title the user
             * was during their teaching experience.
             * @param otherJobFrom A String object that represents the date
             * the user started their other work experience.
             * @param otherJobTo A String object that represents the date the
             * user ended their other work experience.
             * @param yearsOfService An int that represents how long the
             * user's other work experience lasted.
             * @param status A String object that represents whether the user
             * was full-time or part-time for their other work experience.
             */
            String institution = "";
            String title = "Enter Your Title";
            String otherJobFrom = LocalDateTime.now().toString().substring(0, LocalDateTime.now().toString().indexOf("T"));
            String otherJobTo = LocalDateTime.now().toString().substring(0, LocalDateTime.now().toString().indexOf("T"));
            int yearsOfService = 0;
            String status = "Full-time";

            /**
             * This java code gets the other work experience that correpsonds
             * to the current experience. It checks to see if the other work
             * experience exists and that the current credential is not null.
             * Then it checks through every other work experience in the list
             * of experiences and assigns it as soon as it finds the degree
             * with the same id as the current teaching experience.
             */
            if (wecExist && currentwork != null) {
                for (WorkExp exp : wec) {
                    if (exp.getWorkID() == currentwork) {
                        e = exp;
                        break;
                    }
                }
            } else {
                synchronized (lock) { // no degrees for application or currentcred not set
                    sess.setAttribute("currentwork", new Integer(-1));
                }
            }

            /**
             * This java code checks to see that the other work experience is
             * not null. It then begins to check every field and fills them
             * based off of the data in the corresponding database entry in
             * the other work experience table.
             */
            if (e != null) {
                if (e.getInstitution() != null) {
                    institution = e.getInstitution();
                }
                if (e.getTitle() != null) {
                    title = e.getTitle();
                }
                if (e.getExperienceDates() != null) {
                    otherJobFrom = e.getExperienceDates().substring(0, e.getExperienceDates().indexOf("%"));
                    otherJobTo = e.getExperienceDates().substring(e.getExperienceDates().indexOf("%") + 1);
                }
                if (e.getYearsOfService() != 0) {
                    yearsOfService = e.getYearsOfService();
                }
                if (e.isFullTime() == false) {
                    status = "Part-time";
                }
            }
            if(request.getSession().getAttribute("isPopup") != null)
            {%>
            <button id="open_popup" hidden="hidden" name="hiddenPopup" onClick="openModal()"></button>
            <%}
        %>
        <jsp:include page="sideTabs.jsp"/>
        <script>
            document.getElementsByName("dropbutton")[0].className = "dropdown-btn active";
            document.getElementsByName("workExp")[0].className = "inDropdown active";

            //keeps the dropdown open when element is clicked
            window.onload = function () {
                document.getElementById("backgroundInformationDropdown").click();
                if(document.getElementById("open_popup") !== null)
                    document.getElementById("add_work_exp").click();
            };
        </script>
        <div id="teaching" class="tabcontent">
            <div class="paper">
                <div class="paperTop">

                    <!--save button-->
                    <input type="submit" onclick="clickSave()" value="Save"/>

                    <div class="pageTitle">Other Work Experience</div>
                    <center><div>
                            <div class ="current_apps_subtitle">Current Application:</div> 
                            <div class ="current_apps_displayBox">
                                <% if (request.getSession().getAttribute("currentapp") == null) {%>
                                No Application Selected
                                <%} else {
                                    Application current = (Application) request.getSession().getAttribute("currentapp");
                                %>
                                <%=current.getFriendlyName()%>
                                <%}%>
                            </div>
                        </div></center>
                    <hr>
                </div>
                <div class="paperContents">
                    <p class="description">If you have any other work experience from an institution, please enter in the following information:</p>
                    <form id="degree_table" method="POST">
                        <%if (wecExist) {%>
                        <table id ="insertTables">
                            <%

                                /**
                                 * The following java code is used to create an
                                 * html table that represents all the teaching
                                 * experiences the user currently has tied to
                                 * their application. From here the user can
                                 * edit or delete an experience.
                                 */
                                out.print("<caption class = \"tableHeaderTitle\">Submitted Records</caption>");
                                // get the iterator for the degrees and print labels
                                Iterator<WorkExp> wecItr = wec.iterator();
                                WorkExp wex = wecItr.next();
                                out.print("<tr>");
                                wex.printSummaryLabels(out);
                                out.println("</tr>");

                                /**
                                 * This java code creates the content of the
                                 * first experience, along with an edit and
                                 * delte button for it
                                 */
                                out.print("<tr>");
                                wex.printSummaryRow(out);
                                out.println("<td><button onclick='openModal()' class ='action_button' type='submit' formaction='UpdateOtherWorkExperienceServlet' name='workExp' value='" + wex.getWorkID() + "'>Edit</button> <button class ='action_button' type='submit' id='work_exp_delete_button' formaction='UpdateOtherWorkExperienceServlet' onClick='deleteWorkExp()' value='" + wex.getWorkID() + "'>Delete</button></td>");

                                out.println("</tr>");

                                /**
                                 * This while loop iterates through all the
                                 * degrees created and prints them into the
                                 * table.
                                 *
                                 * @param idName A String that uses the
                                 * <code>int</code> i to uniquely name the
                                 * delete buttons, otherwise the method for
                                 * deletion will only be called for the first
                                 * table entry with calling id.
                                 */
                                while (wecItr.hasNext()) {
                                    String idName = Integer.toString(i) + "_work_exp_delete_button";
                                    wex = wecItr.next();
                                    out.print("<tr>");
                                    wex.printSummaryRow(out);
                                    out.println("<td><button onclick='openModal()' class ='action_button'  type='submit' formaction='OtherWorkExperienceAutoFillServlet' name='workExp' value='" + wex.getWorkID() + "'>Edit</button> <button class ='action_button' type='submit' id='" + idName + "' formaction='UpdateOtherWorkExperienceServlet' onClick='whileDeleteWorkExp(" + i + ")' value='" + wex.getWorkID() + "'>Delete</button></td>");
                                    out.println("</tr>");
                                    i++;
                                }
                                out.println("</table>");%>
                            <%} else {%>No records have been added.<%}%>
                    </form>
                    <button onclick="openModal()" class ="action_button" id="add_work_exp"> Add Credentials </button>

                    <div id ="myModal" class ="modal">
                        <div class ="modal-content">
                            <span class ="close">&times;</span>
                     
                            <span class="description">Insert any Other Work Experience</span>
                            <hr>
                            <form id="update_other_work_experience_form" action="UpdateOtherWorkExperienceServlet" method="POST">
                                <div class="fieldLayout">Firm or Institution <span style="margin-left: 26%" id="firmOrInstitutionCurrent"><%=institution.length()%></span><span>/50</span>
                                    <input id="firmOrInstitution" oninput="updateCharCount('firmOrInstitutionCurrent', 'firmOrInstitution')" maxLength="50" type="text" name="otherWorkLocation" class="generalTextboxStyle"value="<%=institution%>">
                                </div>
                                <div class="fieldLayout">Title or Job Description <span style="margin-left: 18%" id="titleOrJobDescriptionCurrent"><%=title.length()%></span><span>/100</span>
                                    <input id="titleOrJobDescription" maxLength="100" oninput="updateCharCount('titleOrJobDescriptionCurrent', 'titleOrJobDescription')" type="text" name="jobTitle" class="generalTextboxStyle"value="<%=title%>">
                                </div>
                                <div class="fieldLayout">From 
                                    <input type="date" name="otherJobFrom" class="generalTextboxStyle"value="<%=otherJobFrom%>">
                                </div>
                                <div class="fieldLayout">To
                                    <input type="date" name="otherJobTo" class="generalTextboxStyle"value="<%=otherJobTo%>">
                                </div>
                                <div class="fieldLayout">Total Number of Years
                                    <input type="number" name="otherJobYears" min="0" max="70" class="generalTextboxStyle"value="<%=yearsOfService%>">
                                </div>
                                <div class="fieldLayout">Status
                                    <input type="radio" name="otherJobStatus" value="Full-time" checked="checked">Full-time
                                    <input type="radio" name="otherJobStatus" value="Part-time">Part-time
                                </div>
                                <hr>
                                <input type="submit" name="insert" class="action_button" value="Save Credential"/>
                                <!--save button-->
                                <input type="submit" class ="action_button" onclick="clickSave()" value="Update Existing"/>
                        </div>
                    </div>
                    <div class="footerButtons">
                        <hr>
                        <input type="submit" hidden="hidden" id="save_hidden_button">
                        <input type="submit" name="transcripts" value="Continue"/>
                        <input type="submit" name="print" value="Export"/>
                        <input type="submit" name="teachFac" value="Back"/>
                        </form>

                        <form id='redirct_page' action='RedirectServlet' method='POST'>                 
                            <!--skip button-->                    
                            <input type="submit" name="transcripts" value="Skip"/>
                        </form>
                    </div>
                </div>
            </div>


            <script>
                var dropdown = document.getElementsByClassName("dropdown-btn");
                var i;

                for (i = 0; i < dropdown.length; i++) {
                    dropdown[i].addEventListener("click", function () {

                        var dropdownContent = this.nextElementSibling;
                        if (dropdownContent.style.display === "block") {
                            dropdownContent.style.display = "none";
                        } else {
                            dropdownContent.style.display = "block";
                        }
                    });
                }
            </script>
            <script>
                // This function allows the visible button 'saved' to be clicked through a hidden button
                function clickSave()
                {
                    document.getElementById("save_hidden_button").click();
                }
                function clickPopup()
                {
                    document.getElementById("open_popup").click();
                }
            </script>
            <script>
                    
                    function deleteWorkExp()
                    {
                        var deleteButton = confirm("Are you sure you want to delete this work experience?");
                        var deleteName = document.getElementById("work_exp_delete_button");
                        if (deleteButton == true)
                        {
                            deleteName.name = "deleteWork";
                        } else
                        {
                            deleteName.name = "cancel";
                        }
                    }
                    function whileDeleteWorkExp(i)
                    {
                        var deleteButton = confirm("Are you sure you want to delete this work experience?");
                        var idName = i + "_work_exp_delete_button";
                        var deleteName2 = document.getElementById(idName);
                        if (deleteButton == true)
                        {
                            deleteName2.name = "deleteWork";
                        } else
                        {
                            deleteName2.name = "cancel";
                        }
                    }
                </script>
            <script>
                // Get the modal
                var modal = document.getElementById('myModal');
                // Get the <span> element that closes the modal
                var span = document.getElementsByClassName("close")[0];
                function openModal()
                {
                    // Declare var thats going to be used to open modal
                    var open;
                    // When the user clicks the button, open the modal 
                    open.onclick = modal.style.display = "block";
                }
                // When the user clicks on <span> (x), close the modal
                span.onclick = function () {
                    modal.style.display = "none";
                };
                // When the user clicks anywhere outside of the modal, close it
                window.onclick = function (event) {
                    if (event.target === modal) {
                        modal.style.display = "none";
                    }
                };
            </script>
    </body>
</html>
