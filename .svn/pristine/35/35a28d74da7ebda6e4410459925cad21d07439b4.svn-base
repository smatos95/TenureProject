package mysql;

import common.Narrative;
import database.SQLUtility;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.Collection;
import java.util.LinkedList;
import java.util.logging.Level;
import utilities.WebErrorLogger;

/**
 * Represents a manager for the <code>Narrative</code> object, which 
 * implements the <code>NarrativeManager</code> interface.
 * 
 * @author Gryphon Ayers (2019)
 */
public class NarrativeManager implements database.NarrativeManager {

    @Override
    public Narrative getNarrative(int narrativeID) {
        String sql = "SELECT * FROM narrative WHERE narrativeID = ?;";
        Connection conn = mysql.Web_MYSQL_Helper.getConnection();
        ResultSet rs;
        PreparedStatement stmt2 = null;
        Narrative nar;
        try {
            stmt2 = conn.prepareStatement(sql);
            stmt2.setInt(1, narrativeID);
            
            rs = stmt2.executeQuery();
            if (rs == null || rs.next() == false) {
                Web_MYSQL_Helper.closePreparedStatement(stmt2);
                Web_MYSQL_Helper.returnConnection(conn);
                return null;
            }
            nar = SQLUtility.convertResultSetToNarrative(rs);
            
            Web_MYSQL_Helper.closePreparedStatement(stmt2);
            Web_MYSQL_Helper.returnConnection(conn);
        } catch (SQLException ex) {
            WebErrorLogger.log(Level.SEVERE, "SQLException in getNarrative(int narrativeID) "
                    + "narrativeID="+narrativeID + " error: " + ex);
            Web_MYSQL_Helper.closePreparedStatement(stmt2);
            Web_MYSQL_Helper.returnConnection(conn);
            return null;
        }
        Web_MYSQL_Helper.closePreparedStatement(stmt2);
        Web_MYSQL_Helper.returnConnection(conn);
        
        return nar;
    }

    @Override
    public Collection<Narrative> getNarrativesByApplication(int application) {
        String sql = "SELECT * FROM narrative where application = ?;";
         Connection conn = mysql.Web_MYSQL_Helper.getConnection();
        ResultSet rs;
        PreparedStatement stmt2 = null;
        LinkedList<Narrative> nars = new LinkedList<>();
        try {
            stmt2 = conn.prepareStatement(sql);
            stmt2.setInt(1, application);
            
            rs = stmt2.executeQuery(sql);
            if (rs == null || rs.next() == false) {
                Web_MYSQL_Helper.closeStatement(stmt2);
                Web_MYSQL_Helper.returnConnection(conn);
                return null;
            }
            while (rs.next()) {
                Narrative nar = SQLUtility.convertResultSetToNarrative(rs);
                nars.add(nar);
            }
        } catch (SQLException ex) {
            WebErrorLogger.log(Level.SEVERE, "SQLException in getNarrativesByApplication(int application) "
                    + "application=" + application + " error: " + ex);
            Web_MYSQL_Helper.closeStatement(stmt2);
            Web_MYSQL_Helper.returnConnection(conn);
            return null;
        }
        Web_MYSQL_Helper.closeStatement(stmt2);
        Web_MYSQL_Helper.returnConnection(conn);
        
        return nars;
    }

    @Override
    public boolean insertNarrative(Narrative narrative) {
        String sql = "INSERT INTO `Tenure`.`narrative` "
                + "(`application`, `narrativeText`, "
                + "`narrativeMedia`) "
                + "VALUES (?, ?, ?);";
        Connection conn = mysql.Web_MYSQL_Helper.getConnection();
        PreparedStatement stmt2 = null;
        boolean returnValue;
        try {
            stmt2 = conn.prepareStatement(sql);
            stmt2.setInt(1, narrative.getApplication());
            stmt2.setString(2, narrative.getNarrativeText());
            stmt2.setInt(3, narrative.getNarrativeMedia());
            
            returnValue = stmt2.executeUpdate() > 0;
            
            Web_MYSQL_Helper.closePreparedStatement(stmt2);
            Web_MYSQL_Helper.returnConnection(conn);
        } catch (SQLException ex) {
            WebErrorLogger.log(Level.SEVERE, "SQLException in insertNarrative(Narrative narrative) " + ex);
            Web_MYSQL_Helper.closePreparedStatement(stmt2);
            Web_MYSQL_Helper.returnConnection(conn);
            return false;
        }
        Web_MYSQL_Helper.closePreparedStatement(stmt2);
        Web_MYSQL_Helper.returnConnection(conn);
        
        return returnValue;
    }

    @Override
    public Narrative updateNarrative(Narrative narrative) {
        String sql = "UPDATE narrative SET application=? narrativeText=? "
                + "narrativeMedia=? WHERE narrativeID=?;";
        Connection conn = mysql.Web_MYSQL_Helper.getConnection();
        PreparedStatement stmt2 = null;
        try {
            stmt2 = conn.prepareStatement(sql);
            stmt2.setInt(1, narrative.getApplication());
            stmt2.setString(2, narrative.getNarrativeText());
            stmt2.setInt(3, narrative.getNarrativeMedia());
            stmt2.setInt(4, narrative.getNarrativeID());
            
            Web_MYSQL_Helper.closePreparedStatement(stmt2);
            Web_MYSQL_Helper.returnConnection(conn);
        } catch (SQLException ex) {
            WebErrorLogger.log(Level.SEVERE, "SQLException in updateGrades(Grades grades) " + ex);
            Web_MYSQL_Helper.closePreparedStatement(stmt2);
            Web_MYSQL_Helper.returnConnection(conn);
            return null;
        }
        Web_MYSQL_Helper.closePreparedStatement(stmt2);
        Web_MYSQL_Helper.returnConnection(conn);
        
        return getNarrative(narrative.getNarrativeID());
    }

    @Override
    public boolean deleteNarrative(Narrative narrative) {
        String sql = "DELETE FROM narrative WHERE narrativeID =?; ";
        Connection conn = mysql.Web_MYSQL_Helper.getConnection();
        PreparedStatement stmt2 = null;
        try {
            stmt2 = conn.prepareStatement(sql);
            stmt2.setInt(1, narrative.getNarrativeID());
            stmt2.executeUpdate();
            Web_MYSQL_Helper.closePreparedStatement(stmt2);
            Web_MYSQL_Helper.returnConnection(conn);
            return true;

        } catch (SQLException ex) {
            WebErrorLogger.log(Level.SEVERE, "SQLException in deleteNarrative(Narrative narrative) " + narrative.getNarrativeID() + " error: " + ex);
            Web_MYSQL_Helper.closePreparedStatement(stmt2);
            Web_MYSQL_Helper.returnConnection(conn);
            return false;
        }
    }

    @Override
    public Collection<Narrative> getAllNarratives() {
        String sql = "SELECT * FROM narrative;";
        Connection conn = mysql.Web_MYSQL_Helper.getConnection();
        ResultSet rs;
        Statement stmt = null;
        LinkedList<Narrative> nars = new LinkedList<>();
        try {
            stmt = conn.createStatement();
            
            rs = stmt.executeQuery(sql);
            if (rs == null || rs.next() == false) {
                Web_MYSQL_Helper.closeStatement(stmt);
                Web_MYSQL_Helper.returnConnection(conn);
                return null;
            }
            while (rs.next()) {
                Narrative nar = SQLUtility.convertResultSetToNarrative(rs);
                nars.add(nar);
            }
        } catch (SQLException ex) {
            WebErrorLogger.log(Level.SEVERE, "SQLException in getAllNarratives() "
                    + " error: " + ex);
            Web_MYSQL_Helper.closeStatement(stmt);
            Web_MYSQL_Helper.returnConnection(conn);
            return null;
        }
        Web_MYSQL_Helper.closeStatement(stmt);
        Web_MYSQL_Helper.returnConnection(conn);
        
        return nars;
    }
    
}
