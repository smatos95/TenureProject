package mysql;

import common.Degree;
import database.SQLUtility;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.Collection;
import java.util.LinkedList;
import java.util.logging.Level;
import utilities.WebErrorLogger;


/**
 * 
 */
public class DegreeManager implements database.DegreeManager {

    @Override
    public Degree getDegree(int degreeID) {
        String sql = "SELECT * FROM degree WHERE degreeID = ? ; ";
        Connection conn = mysql.Web_MYSQL_Helper.getConnection();
        ResultSet rs;
        Degree deg;
        PreparedStatement stmt2 = null;
        try {
            stmt2 = conn.prepareStatement(sql);
            stmt2.setInt(1, degreeID);

            rs = stmt2.executeQuery();
            if (rs == null || rs.next() == false) {
                Web_MYSQL_Helper.closePreparedStatement(stmt2);
                Web_MYSQL_Helper.returnConnection(conn);
                return null;
            }
            deg = SQLUtility.convertResultSetToDegree(rs);
            
            rs.close();

        } catch (SQLException ex) {
            WebErrorLogger.log(Level.SEVERE, "SQLException in getDegree(int degreeID) "
                    + "degreeID="+degreeID + " error: " + ex);
            Web_MYSQL_Helper.closePreparedStatement(stmt2);
            Web_MYSQL_Helper.returnConnection(conn);
            return null;
        }
        Web_MYSQL_Helper.closePreparedStatement(stmt2);
        Web_MYSQL_Helper.returnConnection(conn);

        return deg;
    }

    @Override
    public Collection<Degree> getDegreesByApplication(int application) {
        String sql = "SELECT * FROM degree WHERE application = ? ; ";
        Connection conn = mysql.Web_MYSQL_Helper.getConnection();
        ResultSet rs;
        LinkedList<Degree> degs = new LinkedList<>();
        PreparedStatement stmt2 = null;
        try {
            stmt2 = conn.prepareStatement(sql);
            stmt2.setInt(1, application);

            rs = stmt2.executeQuery();
            if (rs == null || rs.next() == false) {
                Web_MYSQL_Helper.closePreparedStatement(stmt2);
                Web_MYSQL_Helper.returnConnection(conn);
                return null;
            }
            while(rs.next()) {
                Degree deg = SQLUtility.convertResultSetToDegree(rs);
                degs.add(deg);
            }
            
            rs.close();

        } catch (SQLException ex) {
            WebErrorLogger.log(Level.SEVERE, "SQLException in getDegreesByApplication(int application) "
                    + "application="+application + " error: " + ex);
            Web_MYSQL_Helper.closePreparedStatement(stmt2);
            Web_MYSQL_Helper.returnConnection(conn);
            return null;
        }
        Web_MYSQL_Helper.closePreparedStatement(stmt2);
        Web_MYSQL_Helper.returnConnection(conn);

        return degs;
    }

    @Override
    public boolean insertDegree(Degree degree) {
        String sql = "INSERT INTO `Tenure`.`degree` "
                + "(`application`, "
                + "`institution`, "
                + "`credential`, "
                + "`fieldOfStudy`, "
                + "`attendancePeriods`, "
                + "`transcript`) VALUES (?, ?, ?, ?, ?, ?);";
        boolean returnValue;
        Connection conn = mysql.Web_MYSQL_Helper.getConnection();
        PreparedStatement stmt2 = null;
        try {
            stmt2 = conn.prepareStatement(sql);
            stmt2.setInt(1, degree.getApplication());
            stmt2.setString(2, degree.getInstitution());
            stmt2.setString(3, degree.getCredential());
            stmt2.setString(4, degree.getFieldOfStudy());
            stmt2.setString(5, degree.getAttendancePeriods());
            stmt2.setInt(6, degree.getTranscript());
            
            returnValue = stmt2.executeUpdate() > 0;
        } catch (SQLException ex) {
            WebErrorLogger.log(Level.SEVERE, "SQLException in insertDegree(Degree degree) " + ex);
            Web_MYSQL_Helper.closePreparedStatement(stmt2);
            Web_MYSQL_Helper.returnConnection(conn);
            return false;
        }
        Web_MYSQL_Helper.closePreparedStatement(stmt2);
        Web_MYSQL_Helper.returnConnection(conn);
        return returnValue;
    }

    @Override
    public Degree updateDegree(Degree degree) {
        String sql = "UPDATE degree SET application=?, "
                + "institution=?, credential=?, fieldOfStudy=?, "
                + "attendancePeriods=?, transcript=? "
                + "WHERE degreeID=?;";
        Connection conn = mysql.Web_MYSQL_Helper.getConnection();
        PreparedStatement stmt2 = null;
        try {
            stmt2 = conn.prepareStatement(sql);
            stmt2.setInt(1, degree.getApplication());
            stmt2.setString(2, degree.getInstitution());
            stmt2.setString(3, degree.getCredential());
            stmt2.setString(4, degree.getFieldOfStudy());
            stmt2.setString(5, degree.getAttendancePeriods());
            stmt2.setInt(6, degree.getTranscript());
            stmt2.setInt(7, degree.getDegreeID());
            
            stmt2.executeUpdate();
            
            Web_MYSQL_Helper.closePreparedStatement(stmt2);
            Web_MYSQL_Helper.returnConnection(conn);
        } catch (SQLException ex) {
            WebErrorLogger.log(Level.SEVERE, "SQLException in deleteDegree(Degree degree) " + ex);
            Web_MYSQL_Helper.closePreparedStatement(stmt2);
            Web_MYSQL_Helper.returnConnection(conn);
        }
        Web_MYSQL_Helper.closePreparedStatement(stmt2);
        Web_MYSQL_Helper.returnConnection(conn);
        
        return getDegree(degree.getDegreeID());
    }

    @Override
    public boolean deleteDegree(int degreeID) {
        String sql = "DELETE FROM degree WHERE degreeID = ?;";
        Connection conn = mysql.Web_MYSQL_Helper.getConnection();
        PreparedStatement stmt2 = null;
        boolean returnValue;
        try {
            stmt2 = conn.prepareStatement(sql);
            stmt2.setInt(1, degreeID);
            
            returnValue = stmt2.executeUpdate() > 0;
            
            Web_MYSQL_Helper.closePreparedStatement(stmt2);
            Web_MYSQL_Helper.returnConnection(conn);
        } catch (SQLException ex) {
            WebErrorLogger.log(Level.SEVERE, "SQLException in deleteDegree(Degree degree) " + ex);
            Web_MYSQL_Helper.closePreparedStatement(stmt2);
            Web_MYSQL_Helper.returnConnection(conn);
            return false;
        }
        Web_MYSQL_Helper.closePreparedStatement(stmt2);
        Web_MYSQL_Helper.returnConnection(conn);
        
        return returnValue;
    }

    @Override
    public Collection<Degree> getAllDegrees() {
        String sql = "SELECT * FROM degree ; ";
        Connection conn = mysql.Web_MYSQL_Helper.getConnection();
        ResultSet rs;
        LinkedList<Degree> degs = new LinkedList<>();
        Statement stmt = null;
        try {
            stmt = conn.createStatement();

            rs = stmt.executeQuery(sql);
            if (rs == null || rs.next() == false) {
                Web_MYSQL_Helper.closeStatement(stmt);
                Web_MYSQL_Helper.returnConnection(conn);
                return null;
            }
            while(rs.next()) {
                Degree deg = SQLUtility.convertResultSetToDegree(rs);
                degs.add(deg);
            }
            
            rs.close();

        } catch (SQLException ex) {
            WebErrorLogger.log(Level.SEVERE, "SQLException in getAllDegrees() "
                    + " error: " + ex);
            Web_MYSQL_Helper.closeStatement(stmt);
            Web_MYSQL_Helper.returnConnection(conn);
            return null;
        }
        Web_MYSQL_Helper.closeStatement(stmt);
        Web_MYSQL_Helper.returnConnection(conn);

        return degs;
    }
    
}
