package servlets;

import common.Application;
import common.BuUser;
import common.TeachingExp;
import java.io.IOException;
import java.time.LocalDateTime;
import java.util.Collection;
import java.util.Iterator;
import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import mysql.ApplicationManager;
import mysql.TeachingExpManager;

/**
 *
 * @author Riley Hughes (2019)
 */
@WebServlet(name = "UpdateTeachingFacultyServlet", urlPatterns = {"/UpdateTeachingFacultyServlet"})
public class UpdateTeachingFacultyServlet extends HttpServlet {

    /**
     * Processes requests for both HTTP <code>GET</code> and <code>POST</code>
     * methods.
     *
     * @param request servlet request
     * @param response servlet response
     * @throws ServletException if a servlet-specific error occurs
     * @throws IOException if an I/O error occurs
     */
    protected void processRequest(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        response.setContentType("text/html;charset=UTF-8");
        
        boolean appCreated = false;
        
        // Get BU User's details
        BuUser u = (BuUser) request.getSession().getAttribute("user");
        
        ApplicationManager am = new ApplicationManager();
        TeachingExpManager tem = new TeachingExpManager();
        
        // Get user's apps
        Collection<Application> a = am.getApplicationsByUserID(u.getUserNumber());
        
        Collection<TeachingExp> texps = null;
        TeachingExp e;
        
        // Set an application with the details the user entered. Since no data
        // stored in an application object is set in this page, only basic info
        // is set.
        Application app;
        
        if (request.getSession().getAttribute("currentapp") == null) {
            app = new Application(0);
            app.setCreationDate(LocalDateTime.now());
        } else {
            app = (Application) request.getSession().getAttribute("currentapp");
            texps = tem.getTeachingExpsByApplication(app.getApplicationID());
            if (app.getCreationDate() == null)
                app.setCreationDate(LocalDateTime.now());
        }
        app.setApplicantUser(u.getUserNumber());
        
        if (((String) request.getSession().getAttribute("apptype")).equalsIgnoreCase("Tenure"))
            app.setApplicationType("tenure");
        else if (((String) request.getSession().getAttribute("apptype")).equalsIgnoreCase("Promotion"))
            app.setApplicationType("promotion");
        
        if (texps != null && texps.isEmpty() == false)
            e = texps.iterator().next();
        else
            e = new TeachingExp(0);
        
        // Set teaching exp info
        e.setInstitution(request.getParameter("teachingInstitution"));
        if (request.getParameter("teachingStatus").equalsIgnoreCase("Full-time"))
            e.setIsFullTime(true);
        else if (request.getParameter("teachingStatus").equalsIgnoreCase("Part-time"))
            e.setIsFullTime(false);
        e.setRank(request.getParameter("teachingRank"));
        e.setTeachingDates(request.getParameter("teachingFrom") + "%" + request.getParameter("teachingTo"));
        e.setYearsOfService(request.getParameter("teachingYears"));
        
        // If the user has no apps, make a new one. If they have apps, then
        // update their current one.
        if (a == null || a.isEmpty()) {
            am.insertApplication(app);
            appCreated = true;
        } else {
            if (request.getSession().getAttribute("currentapp") != null)
                am.updateApplication(app);
            else {
                am.insertApplication(app);
                appCreated = true;
            }
        }
        
        if (appCreated == true) {
            Application temp1;
            a = am.getApplicationsByUserID(u.getUserNumber());
            Iterator<Application> itann = a.iterator();
            
            while (itann.hasNext()) {
                temp1 = itann.next();
                
                if (itann.hasNext() == false)
                    request.getSession().setAttribute("currentapp", temp1);
            }
        } else
            // Update session variable for autopopulation
            request.getSession().setAttribute("currentapp", app);
        
        // If the user created a new teachingexp, insert it. If they are updating
        // a current one, then do so.
        if (e.getTeachingID() == 0) {
            e.setApplication(((Application) request.getSession().getAttribute("currentapp")).getApplicationID());
            tem.insertTeachingExp(e);
        } else
            tem.updateTeachingExp(e);
        
        // Send the user back to the teaching page
        if (request.getParameter("workExp") != null)
        {
            request.getRequestDispatcher("jsp/otherWorkExperience.jsp").forward(request, response);
        }
        else if (request.getParameter("print") != null)
        {
            request.getRequestDispatcher("/PrintTeachingFacultyServlet").forward(request, response);
        }
        else if (request.getParameter("eduCred") != null)
        {
            request.getRequestDispatcher("jsp/educationalCred.jsp").forward(request, response);
        }
        else
        request.getRequestDispatcher("jsp/teachingFaculty.jsp").forward(request, response);
    }

    // <editor-fold defaultstate="collapsed" desc="HttpServlet methods. Click on the + sign on the left to edit the code.">
    /**
     * Handles the HTTP <code>GET</code> method.
     *
     * @param request servlet request
     * @param response servlet response
     * @throws ServletException if a servlet-specific error occurs
     * @throws IOException if an I/O error occurs
     */
    @Override
    protected void doGet(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        processRequest(request, response);
    }

    /**
     * Handles the HTTP <code>POST</code> method.
     *
     * @param request servlet request
     * @param response servlet response
     * @throws ServletException if a servlet-specific error occurs
     * @throws IOException if an I/O error occurs
     */
    @Override
    protected void doPost(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        processRequest(request, response);
    }

    /**
     * Returns a short description of the servlet.
     *
     * @return a String containing servlet description
     */
    @Override
    public String getServletInfo() {
        return "Short description";
    }// </editor-fold>

}
