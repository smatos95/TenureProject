/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package servlets;

import common.Application;
import common.BuUser;
import common.WorkExp;
import java.io.IOException;
import java.io.PrintWriter;
import java.time.LocalDateTime;
import java.util.Collection;
import java.util.Iterator;
import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import mysql.ApplicationManager;
import mysql.WorkExpManager;

/**
 *
 * @author Jake Gordon (2019)
 */
@WebServlet(name = "UpdateOtherWorkExperienceServlet", urlPatterns =
{
    "/UpdateOtherWorkExperienceServlet"
})
public class UpdateOtherWorkExperienceServlet extends HttpServlet {

    /**
     * Processes requests for both HTTP <code>GET</code> and <code>POST</code>
     * methods.
     *
     * @param request servlet request
     * @param response servlet response
     * @throws ServletException if a servlet-specific error occurs
     * @throws IOException if an I/O error occurs
     */
    protected void processRequest(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        response.setContentType("text/html;charset=UTF-8");
        
        boolean appCreated = false;
        
        //Get BU User's details
        BuUser user = (BuUser) request.getSession().getAttribute("user");
        
        ApplicationManager appManager = new ApplicationManager();
        WorkExpManager workExpManager = new WorkExpManager();
        
        //Get user's applications
        Collection<Application> apps = appManager.getApplicationsByUserID(user.getUserNumber());
        
        Collection<WorkExp> workExps = null;
        WorkExp work;
        
        /**
         * Set an application with the details the user entered. Since no data
         * stored in an application object is set in this page, only basic info
         * is set
         */
        Application application;
        
        if(request.getSession().getAttribute("currentapp") == null)
        {
            application = new Application(0);
            application.setCreationDate(LocalDateTime.now());
        }
        else
        {
            application = (Application) request.getSession().getAttribute("currentapp");
            workExps = workExpManager.getWorkExpsByApplication(application.getApplicationID());
            if(application.getCreationDate() == null)
            {
                application.setCreationDate(LocalDateTime.now());
            }
        }
        application.setApplicantUser(user.getUserNumber());
        
        if (((String) request.getSession().getAttribute("apptype")).equalsIgnoreCase("Tenure"))
        {
            application.setApplicationType("tenure");
        }
        else if(((String) request.getSession().getAttribute("apptype")).equalsIgnoreCase("Promotion"))
        {
            application.setApplicationType("promotion");
        }
        
        if (workExps != null && workExps.isEmpty() == false)
        {
            work = workExps.iterator().next();
        }
        else
        {
            work = new WorkExp(0);
        }
        
        // Set Work Experience information
        work.setInstitution(request.getParameter("otherWorkLocation"));
        work.setTitle(request.getParameter("jobTitle"));
        work.setExperienceDates(request.getParameter("otherJobFrom") + "%" + request.getParameter("otherJobTo"));
        if(request.getParameter("otherJobStatus").equalsIgnoreCase("Full-time"))
        {
            work.setIsFullTime(true);
        }
        else if(request.getParameter("otherJobStatus").equalsIgnoreCase("Part-time"))
        {
            work.setIsFullTime(false);
        }
        
        /**
         * If the user has no applications, make a new one. If they have applications, then
         * update their current one
         */
        if(apps == null || apps.isEmpty())
        {
            appManager.insertApplication(application);
            appCreated = true;
        }
        else
        {
            if (request.getSession().getAttribute("currentapp") != null)
            {
                appManager.updateApplication(application);
            }
            else
            {
                appManager.insertApplication(application);
                appCreated = true;
            }
        }
        
        if (appCreated == true)
        {
            Application tempApp;
            apps = appManager.getApplicationsByUserID(user.getUserNumber());
            Iterator<Application> itApplication = apps.iterator();
            
            while(itApplication.hasNext())
            {
                tempApp = itApplication.next();
                
                if(itApplication.hasNext() == false)
                {
                    request.getSession().setAttribute("currentapp", tempApp);
                }
            }
        }
        else
        {
            //Update session variable for autopopulation
            request.getSession().setAttribute("currentapp",application);
        }
        
        /**
         * If the user created a new workExp, insert it. If they are updating
         * a current one, then do so
         */ 
        if(work.getWorkID() == 0)
        {
            work.setApplication(((Application) request.getSession().getAttribute("currentapp")).getApplicationID());
            workExpManager.insertWorkExp(work);
        }
        else
        {
            workExpManager.updateWorkExp(work);
        }
        if (request.getParameter("transcripts") != null)
        {
            request.getRequestDispatcher("jsp/officialTranscripts.jsp").forward(request, response);
        }
        else
        request.getRequestDispatcher("jsp/otherWorkExperience.jsp").forward(request, response);
    }

    // <editor-fold defaultstate="collapsed" desc="HttpServlet methods. Click on the + sign on the left to edit the code.">
    /**
     * Handles the HTTP <code>GET</code> method.
     *
     * @param request servlet request
     * @param response servlet response
     * @throws ServletException if a servlet-specific error occurs
     * @throws IOException if an I/O error occurs
     */
    @Override
    protected void doGet(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        processRequest(request, response);
    }

    /**
     * Handles the HTTP <code>POST</code> method.
     *
     * @param request servlet request
     * @param response servlet response
     * @throws ServletException if a servlet-specific error occurs
     * @throws IOException if an I/O error occurs
     */
    @Override
    protected void doPost(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        processRequest(request, response);
    }

    /**
     * Returns a short description of the servlet.
     *
     * @return a String containing servlet description
     */
    @Override
    public String getServletInfo() {
        return "Short description";
    }// </editor-fold>

}
