package testdata;

import java.io.File;
import java.io.FileNotFoundException;
import java.util.ArrayList;
import java.util.Random;
import java.util.Scanner;

/**
 * Represents a college course. A course has information for the professor,
 * course name, semester, number of students, and grade statistics.
 * Requires the Semester class
 * @author Shane Panagakos (2019)
 */
public class Course 
{
    private String professor;
    private String courseName;
    private int semesterCode;
    private int studentCount;
    
    /* 
        The number of each grade aquired.
        Each index represents a grade: 
          0  1   2   3   4   5   6   7   8   9   10   11   12   13  
          A  A-  B+  B   B-  C+  C   C-  D+  D   F    R    W   TOTAL
    */
    private int[] grades;
    
    /**
     * Creates a course object. The number of students is randomly generated
     * between 6 and 100. Grades are randomly generated by createGrades().
     * 
     * @param professor - the professor that taught the class.
     * @param semester - semester the class was taught.
     */
    public Course(String professor, int semesterCode)
    {
        this.professor = professor;
        this.semesterCode = semesterCode;
        Semester s = new Semester();
        Random r = new Random();
        
        courseName = createCourseName(r);
        
        //generates number of students between 6 and 100.
        studentCount = r.nextInt(95)+6;
                
        createGrades(studentCount, r);
    }
    
    /**
     * Randomly generates a course name number and section.
     * The course names are scanned from courseNames.txt. The courses should be
     * on separate lines with no extra symbols added.
     * @param r - a random object 
     * @return a random course name
     */
    private String createCourseName(Random r)
    {
        File file = new File("courseNames.txt");
        ArrayList<String> subjects = new ArrayList<String>();

        try 
        {
            Scanner s = new Scanner(file);

            while (s.hasNextLine()) 
            {
                subjects.add(s.nextLine());
            }
            s.close();
        } 
        catch (FileNotFoundException e) 
        {
            e.printStackTrace();
        }
        
        return subjects.get(r.nextInt(subjects.size()))+"-"+(r.nextInt(4)+1)+
                r.nextInt(10)+r.nextInt(10)+"-"+(r.nextInt(20)+1);
    }
    
    /**
     * Assigns a number to the letter grades to represent the index of the 
     * grades array
     */
    private class Grade
    {
        public final int A=0,Am=1,Bp=2,B=3,Bm=4,Cp=5,C=6,Cm=7,Dp=8,D=9,F=10,
                          R=11,W=12,Total=13;
        Grade(){}
    }
    
    /**
     * creates the grade distribution for the course.
     * Grades are randomly generated using the 
     * following statistics: between 
     *   5% and 10% A or A-,  
     *  15% and 35% B+ B or B-,  
     *  35% and 45% C C+ C-, 
     *   0% and  6% D D+ 
     * and the remaining values evenly distributed between F, R, and W
     * Each index represents a grade: 
     *    0  1   2   3   4   5   6   7   8   9   10   11   12   13  
     *    A  A-  B+  B   B-  C+  C   C-  D+  D   F    R    W   TOTAL
     * @param n the number of students in the class.
     * @param r a Random object
     */
    private void createGrades(int n, Random r)
    {
        Grade g = new Grade();
        grades = new int[14];
        for(int i=0; i<14; i++)
        {
            grades[i]=0;
        }
        int counter=0; //counts the number of students recorded
        
        for(int i=0; i<(((n*((double)(r.nextInt(5)+6)/100)))+0.5); i++, counter++)
        {
            if(r.nextBoolean())
                grades[g.A]++;
            else
                grades[g.Am]++;
        }
        for(int i=0; i<(((n*((double)(r.nextInt(20)+16)/100)))+0.5); i++, counter++)
        {
            int gradeChoice = r.nextInt(3);
            
            switch(gradeChoice)
            {
                case 0:  grades[g.Bp]++;break;
                case 1:  grades[g.B]++;break;
                default: grades[g.Bm]++;break;
            }
        }
        for(int i=0; i<(((n*((double)(r.nextInt(10)+36)/100)))+0.5); i++, counter++)
        {
            int gradeChoice = r.nextInt(3);
            
            switch(gradeChoice)
            {
                case 0:  grades[g.Cp]++;break;
                case 1:  grades[g.C]++;break;
                default: grades[g.Cm]++;break;
            }
        }
        for(int i=0; i<(((n*((double)(r.nextInt(6)+1)/100)))+0.5); i++, counter++)
        {
            if(r.nextBoolean())
                grades[g.Dp]++;
            else
                grades[g.D]++;
        }
        for(int i=0; i<n-counter; i++)
        {
            int gradeChoice = r.nextInt(3);
            
            switch(gradeChoice)
            {
                case 0:  grades[g.F]++;break;
                case 1:  grades[g.R]++;break;
                default: grades[g.W]++;break;
            }
        }
        grades[g.Total] = n;
    }
    
    /**
     * @return the professor that teaches the course.
     */
    public String getProfessor(){return professor;}
    
    /**
     * @return the name of the course.
     */
    public String getCourseName(){return courseName;}
    
    /**
     * @return the semester code
     */
    public int getSemesterCode(){return semesterCode;}
    
    /**
     * @return the number of students in the course.
     */
    public int getStudentCount(){return studentCount;}
    
    /**
     * @return the grade distribution of the course as an array.
     */
    public int[] getGrades(){return grades;}
    
    /**
     * @param i - index of the grades array.
     * @return - the value of the specified index of the grades array.
     */
    public int getGrade(int i){return grades[i];}
    
    /**
     * Creates a string of the information corresponding to the course.
     * Format:
     *      Course: courseName
     *      Semester: semester
     *      Professor: professor
     *      A:  #, A-: #, B+: #, B:  #, B-: #, C+: #, C:  #, C-: #, 
     *      D+: #, D:  #, F:  #, R:  #, W:  #, Total: #
     */
    @Override
    public String toString()
    {
        Grade g = new Grade();
        return "Course: "+getCourseName()+
                "\nSemester: "+getSemesterCode()+
                "\nProfessor: "+getProfessor()+
                "\nA:  "+getGrade(g.A)+
                ", A-: "+getGrade(g.Am)+
                ", B+: "+getGrade(g.Bp)+
                ", B:  "+getGrade(g.B)+
                ", B-: "+getGrade(g.Bm)+
                ", C+: "+getGrade(g.Cp)+
                ", C:  "+getGrade(g.C)+
                ", C-: "+getGrade(g.Cm)+
                ",\nD+: "+getGrade(g.Dp)+
                ", D:  "+getGrade(g.D)+
                ", F:  "+getGrade(g.F)+
                ", R:  "+getGrade(g.R)+
                ", W:  "+getGrade(g.W)+
                ", Total: "+getGrade(g.Total);
    }
}
